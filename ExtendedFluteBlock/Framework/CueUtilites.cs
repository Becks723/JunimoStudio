using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xna.Framework.Audio;
using StardewValley;

namespace FluteBlockExtension.Framework
{
    internal class CueUtilites
    {
        /// <summary>Whether a given cue is built in by game (or called "generated by XACT tool"). As opposed to a custom cue, which is added by specifying wave file(s) by user.</summary>
        public static bool IsNativeCue(string cueName)
        {
            CueDefinition cue = Game1.soundBank.GetCueDefinition(cueName);

            // custom cue can only have 1 XactSoundBankSound, and its field 'soundBank' is not assigned.
            return !(cue.sounds.Count is 1
                && cue.sounds[0].soundBank is null);
        }

        /// <summary>Gets whether a given cue is controlled by game's cue variable named "Pitch". Must be a native cue.</summary>
        public static bool IsAffectedByPitchVariable(string cueName)
        {
            CueDefinition cue = Game1.soundBank.GetCueDefinition(cueName);
            foreach (XactSoundBankSound sound in cue.sounds)
            {
                if (sound.rpcCurves.Contains(3))    // rpc curve index 3 points to the Pitch variable.
                {
                    return true;
                }
            }

            return false;
        }

        public static bool IsCueValid(string? cueName, out Exception exception)
        {
            exception = null;
            try
            {
                Game1.soundBank.GetCueDefinition(cueName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static IEnumerable<string> GetAllCues()
        {
            return Game1.soundBank.GetAllCues().Select(cue => cue.name);
        }

        public static SoundEffect[] GetSoundEffects(string cueName)
        {
            if (IsNativeCue(cueName))
            {
                List<SoundEffect> soundEffects = new();
                foreach ((int waveBankIndex, int trackIndex) in GetIndexes(cueName))
                {
                    WaveBank waveBank = waveBankIndex switch
                    {
                        0 => Game1.waveBank,
                        1 => Game1.waveBank1_4,
                        _ => throw new ArgumentException($"Unknown waveBank index: {waveBankIndex}.")
                    };

                    soundEffects.Add(waveBank.GetSoundEffect(trackIndex));
                }
                return soundEffects.ToArray();
            }
            else
            {
                CueDefinition customCue = Game1.soundBank.GetCueDefinition(cueName);
                return (customCue.sounds[0].soundClips[0].clipEvents[0] as PlayWaveEvent).GetVariants()
                    .Select(v => v.overrideSoundEffect)
                    .ToArray();
            }
        }

        /// <summary>Queries raw data of a cue. Must be an original game cue.</summary>
        private static IEnumerable<(int waveBankIndex, int trackIndex)> GetIndexes(string cueName)
        {
            // cueName here always refers to an original game cue.
            // Because custom cues don't need to call this method, and custom ones don't use these two fields.
            CueDefinition cue = Game1.soundBank.GetCueDefinition(cueName);
            foreach (XactSoundBankSound sound in cue.sounds)
            {
                if (!sound.complexSound)
                {
                    yield return (sound.waveBankIndex, sound.trackIndex);
                }
                else
                {
                    if (sound.soundClips != null)
                    {
                        /*foreach (XactClip clip in sound.soundClips)
                        {
                            foreach (ClipEvent ev in clip.clipEvents)
                            {
                                if (ev is PlayWaveEvent wave)
                                {
                                    foreach (PlayWaveVariant variant in wave.GetVariants())
                                    {
                                        yield return (variant.waveBank, variant.track);
                                    }
                                }
                            }
                        }*/

                        var items = from clip in sound.soundClips
                                    from ev in clip.clipEvents
                                    where ev is PlayWaveEvent
                                    from variant in (ev as PlayWaveEvent).GetVariants()
                                    select (variant.waveBank, variant.track);
                        foreach (var item in items)
                            yield return item;
                    }
                }
            }
        }
    }
}